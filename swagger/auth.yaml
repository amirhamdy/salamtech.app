paths:
  /auth/register:
    post:
      tags:
        - Auth
      name: User Registeration
      summary: User Registeration
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              fullName:
                type: string
                example: 'Ahmed Hassan'
              email:
                type: string
                example: 'ahmed@email.com'
              phone:
                type: string
                example: '01009878756'
              userRole:
                type: string
                example: 'doctor'
              password:
                type: string
                format: password
                example: '12345678'
          required:
            - fullName
            - email
            - phone
            - userRole
            - password
      responses:
        200:
          description: User registered successfully
        400:
          description: Validation Error or Duplicated Data

  /auth/login:
    post:
      tags:
        - Auth
      name: User Login
      summary: User Login
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              email:
                type: string
                example: "test@email.com"
              password:
                type: string
                example: "12345678"
                format: password
          required:
            - email
            - password
      responses:
        200:
          description: Logged in successfully
        400:
          description: Invalid credintials

  /auth/me:
    get:
      tags:
        - Auth
      name: Get User Profile
      summary: Get User Profile
      security:
        - Bearer: []
      responses:
        200:
          description: User Profile
        400:
          description: error

  /auth/verify/email/{id}/{code}:
    get:
      tags:
        - Auth
      name: Verify Email Address
      summary: Verify Email Address.
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: '5ef3a60e34bbdc14c06d5efe'
        - in: path
          name: code
          schema:
            type: integer
            example: 5228
      responses:
        200:
          description: Email verified successfully
        400:
          description: error

  /auth/verify/email/resend/{id}:
    get:
      tags:
        - Auth
      name: Resend Email Verification Code
      summary: Resend Email Verification Code
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: '5ef90d24dc4bbe128426f1ed'
          required:
            - id
      responses:
        200:
          description: Email Sent Successfully
        400:
          description: error

  /auth/verify/phone/{id}/{code}:
    get:
      tags:
        - Auth
      name: Verify Phone Number
      summary: Verify Phone Number.
      security:
        - Bearer: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: '5ef3a60e34bbdc14c06d5efe'
        - in: path
          name: code
          schema:
            type: integer
            example: 5228
      responses:
        200:
          description: Phone verified successfully
        400:
          description: error

  /auth/verify/phone/resend/{id}:
    get:
      tags:
        - Auth
      name: Resend Phone Verification Code
      summary: Resend Phone Verification Code
      security:
        - bearerAuth: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: '5ef90d24dc4bbe128426f1ed'
          required:
            - id
      responses:
        200:
          description: Message Sent Successfully
        400:
          description: error

  /auth/updateDeviceToken:
    post:
      tags:
        - Auth
      name: Update Device Token
      summary: Update Device Token
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              id:
                type: string
                example: '5ef90d24dc4bbe128426f1ed'
              deviceToken:
                type: string
                example: '5ef90d24dc4bbe128426f1ed5ef90d24dc4bbe128426f1ed'
          required:
            - id
            - deviceToken
      responses:
        200:
          description: Device Token Successfully Updated
        400:
          description: User Not Found
